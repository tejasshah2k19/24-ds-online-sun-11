Array 
function 
structure 
------------------------------------------
C -> lang 
tools-> TC , VScode
------------------------------------------

DS -> 

10  20  30  40  50  


search = 30 

logic -> code 


server -> 10K users -> search 

1) time complexity -> time  ? 10 20 25 50 
2) space complexity -> memory ->  

--------------------------------------------
n=200
for(i=1;i<=n;i++){
    printf("%d",i);
}

 
100  
1000
200

n time 
------------------------------------------


int a = 5; 

for(i=1;i<=a;i++){//1 2 3 
    for(j=1;j<=i;j++){//1 
        printf("%d",j);
    }
}
->25{X} 

->15{correct} 

->n*n{X}


i   j
1   1 
2   12
3   123 
4   1234
5   12345 

---------------------------------------------

int n = 5; 

for(i=1;i<=n;i++){
    for(j=1;j<=n;j++){
        printf("%d",j);
    }
}

25{correct}

i   j   
1   12345 
2   12345
3   12345
4   12345
5   12345
---------------------------------------------
int search = 7; 

int a[]={1,2,3,4,5,6,7,8,9,0};

for(i=0;i<10;i++){
    if(a[i] == search){
        break; 
    }
}

7{C}
8{X}
9{X}

i
0
1
2
3
4
5
6
-------------------------------------------------------------------


for(i=5;i<=20;i++){
    for(j=5;j<=20;j++){

        if(i%j == 0 ){  0  
            break; 
        }
    }
}

1 
30
225
7
91


i   j   
5   5   break; 
6   56  break; 
7   567 break; 
8   5678
9   56789
10  5   break; 
11  567891011 


--------------------------------------------------------------------

DS -> aLgo -> 

    time complexity -> 
code -> output-> 


                                DS 
    Linear DS                                   Non Linear 
   Array                                        Tree  
   Stack                                        Graph 
   Queue 
   LinkedList 

    searching 
    sorting 

 ------------------------------------------------------------------------------                   

VS code -> 

-------------------------------------------------------------------------------
array -> 

    int a;//single value  
    a=10; 
    -----
    -----
    a=20; 
    pf(a); 

    //if you want to store n numbers of data items ? 
    //array 
    //  collection of same type of data 
    //  continues memory allocation 
    //  array access index 
    //  index starts with 0 and ends with SIZE-1 
    //  static memory 
    int a[5];//5 copy  index 
    // 0 1 2 3 4 

    a[0]
    a[1]
    a[2]
    a[3]
    a[4]

------------------------------------------------------------------
function -> 

    void add(){
        a=10//sf : console 
        b=20//sf : console 
        c=a+b
        pf(c)
    }
    void mul(int a,int b){
        c=a*b
        pf(c)
    }

    add() //call

    mul(20,30) //call 
    scanf -> x
    scanf -> y 
    mul(x,y)
    //cohesion 



    console -> 
------------------------------------------------------------------------

STACK -> array  

LiFo --> Last In First Out 

M.T :- x,y,z,a,b,c


Plate Distribution 
Book 
Deck of Cards 

Photo -> click -> display -> ? last 
file download history --> 20GB 500GB 
email ---> LiFo 
whats app chat  ---> LiFo
phone recent call ---> LiFo 
notification  --> LiFo 
history -> LiFo 
ctrl + z -> 

--------------------------------------------------------------------------------


STACK -> Last in First Out


whatsapp msg -> 
gallery -> 
history ->
 

    Mr X -> msg 
    Mr Y 
    Mr Z 


    Z
    Y
    X 

------------------------------------------------------------------------------------------

pop()
peek() -> top of the stack 
peep() -> location  




LiFo -> whatsapp , gallery , history ,




stack -> 

        4     
        3    40   top 
        2    30
        1    20
        0    10

peep -> 

enter location 
2
30 

enter location 
1
40

enter location 
4
10




stack -> 

        4     
        3     
        2    30   top 
        1    20
        0    10


enter location 
2
20 

enter location 
1
30

enter location 
4
Invalid Location 

-------------------------------------------------------------------------------

1) linear search 
2) binary search 


a[]= {23,45,67,89,87,6,5,43,450,607}  

search = 43 
found 

search = 89 
found 

search = 9000
not found 



a[]= {23,45,67,89,87,6,5,43,450,607,33,44,55,66,77,788,89} //20 
search = 9000 

O(n) 

-------------------------------------------------------------------------------------------------



STACK -> LIFO 
         add    -> PUSH
         delete -> POP 

linear search -> time complexity ? -> O(n)

Big O -> upper bound -> worst case 


10  20  30  40  50  60  70  80  90  100 

search = 30 
found 

search = 300 
not found 



binary search -> 


10  20  30  40  50  60  70  80  90  100 


search = 20 
found 


time complexity ? 

--------------------------------------------------------------------------  



STACK 
LinearSearch
BinarySearch 



sorting -> ASC DSC 


25  84  65  32  41  57  96  23  21  5   


ASC -> 5 21 23 25 32 41 65 84 96 

DSC -> 96 84 65 41 32 25 23 21 5 


Bubble Sort -> 
            pass print 
            complexity 


----------------------------------------------------------------

RECURSION -> function calling itself 

        -> BASE CASE -> break -> stop 
        

--------------------------------------------------------------

20  10  60  4   75  8   66  5   

10  20  60  4   75  8   66  5

Bubble sort -> swaping  LR 
selection sort -> less swaping LR  

insertion sort -> 

20  10  60  4   75  8   66  5




20  10  60  4   75  8   66  5   

4  10  20  60   75  8   66  5
           tmp=4 


4   5   8  10   20  60  66  75
                            i 
                            tmp=5  
j


---------------------------------------------------------------------------------------

bubble  -> left --> right -> compare swap 

selection --> left --> right -> smallest find swap 

insertion --> no ---> left -->
 

4  10  20  60   75  8   66  5
            i 
j 
tmp = 4

for i=1;  i<SIZE ; i++ 
    tmp = a[i]; //10 
        for j=i-1 j>=0  j-- 
            if a[j]  > tmp 
                a[j+1] = a[j]; 
            else 
                break; 
        a[j+1] = tmp ; 


-----------------------------------------------------------------------------------------------

Merge Sort :- 
                a : [ 10 20 30 40 50 ] 
                
                b : [ 5 15 19 35 70  ]

                c:  [ 5  10 15  19 20 30 35 40 50 70 ]


-----------------------------------------------------------------------------------------------


Queue -> 
            First In First Out 
            First Come First Serve 

ecom -> order -> 
    50 product -> 55 order -> first 50 confirm 


    1)  printer 
    2)  call Center 
    3)  Message Buffering 
    4)  Resource allocation 
    5)  Web Request 
 

10  20  30  
F        R 

R : insert 
F : remove 

-----------------------------------------------------------------------------------------------

stack array Queue 

HEXA DECIMAL :->
0-9
A-F

    0x 
    0X 

STACK : QUEUE 


enter the string 
0xABC 
valid 

enter the string 
0xABCDWF  
Invalid

enter the string 
0x 
Invalid 


enter the string 
0XAAA 
valid

enter the string 
0xABC121212DFED 
valid 

 



0xABC121212DFED 


0XAAA


0x 

0xABCDWF  